name: docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Build and push production image
        uses: docker/build-push-action@v6.7.0
        with:
          context: ./docker
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/app:latest-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/app:latest

      - name: Build and push test image
        uses: docker/build-push-action@v6.7.0
        with:
          context: ./docker
          target: test
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/test:latest-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/test:latest

  test:
    runs-on: ubuntu-latest
    needs: [ build ]
    container:
      image: deploy320/test:latest-${{ github.sha }}
    env:
      DB_HOST: ${{ secrets.TEST_DB_HOST }}
      DB_PORT: ${{ secrets.TEST_DB_PORT }}
      DB_NAME: ${{ secrets.TEST_DB_NAME }}
      DB_USER: ${{ secrets.TEST_DB_USER }}
      DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
          POSTGRES_USER: ${{ secrets.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_PORT: ${{ secrets.TEST_DB_PORT }}
        ports:
          - 5432:5432
    steps:
      - run: ls -la
      - name: Run tests
        working-directory: /app
        run: pytest -v ./tests/

  deploy:
    runs-on: self-hosted
    needs: [test]
    steps:
      - name: Deploy to server
        run: echo "Deploying..."
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            bash -c "cd tasks/docker && restart.sh"

